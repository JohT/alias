package org.alias.annotation.internal.templates;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Assertions.fail;

import java.io.IOException;

import org.alias.annotation.TypeAlias;
import org.alias.annotation.TypeAliasGeneratedFile;
import org.junit.jupiter.api.Test;

public class TypeAliasTextTemplateTest {

	private TypeAliasTextTemplate template;
	
	@Test
	public void headerTemplateShouldContainGeneratedByNote() throws IOException {
		template = TypeAliasTextTemplate.header();
		String content = template.replacePlaceholderInLine("{(header)}");
		assertContainsText("Generated by 'type-alias'", content);
	}

	@Test
	public void headerTemplateShouldMentionTypeAliasAnnotation() throws IOException {
		template = TypeAliasTextTemplate.header();
		String content = template.replacePlaceholderInLine("{(header)}");
		assertContainsText("@" + TypeAlias.class.getSimpleName(), content);
	}

	@Test
	public void headerTemplateShouldMentionTypeAliasGeneratedFileAnnotation() throws IOException {
		template = TypeAliasTextTemplate.header();
		String content = template.replacePlaceholderInLine("{(header)}");
		assertContainsText("@" + TypeAliasGeneratedFile.class.getSimpleName(), content);
	}

	@Test
	public void createForPlaceholderHeaderShouldLeadToSameResultsAsHeaderShortcut() throws IOException {
		template = TypeAliasTextTemplate.forPlaceholder("header");
		String expectedContents = TypeAliasTextTemplate.header().replacePlaceholderInLine("{(header)}");
		assertEquals(expectedContents, template.replacePlaceholderInLine("{(header)}"));
	}

	@Test
	public void placeholderNameShouldBeExchangeable() throws IOException {
		template = TypeAliasTextTemplate.forDifferentPlaceholderAndReader("myheader", getHeaderTemplateReader());
		String expectedContents = TypeAliasTextTemplate.header().replacePlaceholderInLine("{(header)}");
		assertEquals(expectedContents, template.replacePlaceholderInLine("{(myheader)}"));
	}

	@Test
	public void placeholderMustNotBeNull() {
		try {
			TypeAliasTextTemplate.forPlaceholder(null);
			fail("Expected IllegalArgumentException.");
		} catch (IllegalArgumentException e) {
			assertTrue(e.getMessage().contains("placeholder"), e.getMessage());
			assertTrue(e.getMessage().contains("null"), e.getMessage());
		}
	}

	@Test
	public void placeholderMustNotBeEmpty() {
		try {
			TypeAliasTextTemplate.forPlaceholder(" ");
			fail("Expected IllegalArgumentException.");
		} catch (IllegalArgumentException e) {
			assertTrue(e.getMessage().contains("placeholder"), e.getMessage());
			assertTrue(e.getMessage().contains("empty"), e.getMessage());
		}
	}

	@Test
	public void templateReaderMustNotBeNull() {
		try {
			TypeAliasTextTemplate.forDifferentPlaceholderAndReader("placeholder", null);
			fail("Expected IllegalArgumentException.");
		} catch (IllegalArgumentException e) {
			assertTrue(e.getMessage().contains("template"), e.getMessage());
			assertTrue(e.getMessage().contains("null"), e.getMessage());
		}
	}

	private TypeAliasTemplateReader getHeaderTemplateReader() {
		return TypeAliasTemplateReader.forTemplateName("header.template");
	}

	private void assertContainsText(String expectedContent, String content) {
		String message = String.format("%s not found in\n%s", expectedContent, content);
		assertTrue(content.contains(expectedContent), message);
	}

}
